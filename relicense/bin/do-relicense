#!/usr/bin/perl -w
use strict;

my $DEBUG = $ENV{DEBUG} // 0;
my $FORCE = $ENV{FORCE} // 0;
use Data::Dumper;

use JSON::XS;
use LWP::UserAgent;
use HTML::TreeBuilder::XPath;

use File::Spec;
use File::Basename;
use FindBin;
use Cwd;

my $initial_cwd = $ENV{PWD};

my $json = JSON::XS->new->utf8->pretty;
my $ua = LWP::UserAgent->new;

my $allseen_copyright_start = 'Copyright AllSeen Alliance. All rights reserved.';
my $allseen_copyright_end = 'OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.';

my $new_copyright = 'Copyright (c) 2016 Open Connectivity Foundation and AllJoyn Open Source Project Contributors and others.';

my $allseen_license_rx = qr{(${allseen_copyright_start}.*${allseen_copyright_end})}ms;

my $xpath_query =
  {
   commit_info_date    => q{//table[@class="commit-info"]//tr[1]/td[@class="right"]},
   commit_info_subject => q{//div[@class="commit-subject"]},
  };

my $domain = q{allseenalliance.org};

my $gerrit_host = qq{git.$domain};
my $gerrit_port = 29418;

my $git_host = qq{cgit.$domain};

my( %project );

# Exceptions to filter out projects known not to be updating licenses can go here.
my $proj_skip_rx = qr{
                       (
                         ^All-Users$ |
                         ^$
                       )
                   }x;

my $scriptname    = $FindBin::Script;
my $scriptdirname = $FindBin::Bin;

my $temp_dir = qq{/tmp/${scriptname}};

system(qq{rm -rf ${temp_dir}}) if $FORCE;
system(qq{mkdir -p ${temp_dir}});

my $repo_data_json_file = qq{${temp_dir}/alljoyn-repos-data.json};

my $template_file = Cwd::abs_path( File::Spec->catfile($scriptdirname, '..', 'template', 'new_license.txt') );
my $commit_template_file = Cwd::abs_path( File::Spec->catfile($scriptdirname, '..', 'template', 'commit-message.txt') );
my $license_file = Cwd::abs_path( File::Spec->catfile($scriptdirname, '..', 'template', 'LICENSE-2.0' ) );
my $license_file_basename = basename $license_file;

if( -f $repo_data_json_file ){
  my $json_str = do {
    open( my( $json_fh ), q{<}, $repo_data_json_file )
      or die "couldn't open json file $repo_data_json_file: $!";

    my @line = (<$json_fh>);
    join($/,@line);
  };
  %project = %{ $json->decode( $json_str ) };
}else{

  my @project = split(/\n/, qx{ssh -p ${gerrit_port} ${gerrit_host} gerrit ls-projects});

  foreach my $proj ( @project ){
    next if( $proj =~ /$proj_skip_rx/ );

    my %branch;

    $project{$proj} = { name => $proj,
                        branch => \%branch,
                      };

    print ("Project: [$proj]\n");

    my $gerrit_url = qq{ssh://${gerrit_host}:${gerrit_port}/${proj}};

    my $cgit_url = qq{https://${git_host}/${proj}.git};

    my @remote = split(/\n/, qx{git ls-remote --heads $gerrit_url 2>/dev/null});
    foreach my $remote (@remote){
      my($commit_id,$headname) = split(/\s+/, $remote);

      my($branch_name) = ($headname =~ m{refs/heads/(.+)});

      print ("  Branch: [$branch_name]\n");

      my $branch = {
                    id => $commit_id,
                    name => $branch_name,
                    date => undef,
                    subject => undef,
                   };

      my $url = "$cgit_url/commit/?id=${commit_id}";

      print STDERR qq{Now fetching url [$url]\n} if $DEBUG;
      my $response = $ua->get($url);

      print STDERR qq{Now parsing content as HTML\n} if $DEBUG;
      my $content = $response->decoded_content;

      my $tree = HTML::TreeBuilder::XPath->new;
      $tree->parse($content);
      $tree->eof;

      # Check for error
      my @error_element = $tree->findnodes( q{//*[@id="cgit"]/div[@class="content"]/div[@class="error"]} );

      if( @error_element ){
        print STDERR qq{Error with branch: }, $error_element[0]->content_array_ref->[0], "\n";
        next;
      }

      # extract date
      print STDERR qq{Now extracting date\n} if $DEBUG;
      $branch->{date} = $tree->findnodes( $xpath_query->{commit_info_date} )->[0]->content_array_ref->[0];
      print STDERR qq{Date string: [$branch->{date}]\n} if $DEBUG;

      # extract subject
      print STDERR qq{Now extracting subject\n} if $DEBUG;
      $branch->{subject} = $tree->findnodes( $xpath_query->{commit_info_subject} )->[0]->content_array_ref->[0];
      print STDERR qq{Subject string: [$branch->{subject}]\n} if $DEBUG;

      $tree = $tree->delete;

      next if( $branch->{subject} eq 'Initial empty repository' );

      $branch{$branch_name} = $branch;
    }
  }

  my $json_str = $json->encode( \%project );
  open( my($json_fh), q{>}, $repo_data_json_file )
    or die "couldn't open json file [$repo_data_json_file]: $!";

  print $json_fh $json_str;
}


open( my( $template_fh ), q{<}, $template_file )
  or die "couldn't open template file $template_file: $!";

my( @template_line ) = <$template_fh>;
chomp( @template_line );

close( $template_fh );

my $num_projects = scalar keys %project;

print STDERR $num_projects, qq{ projects\n};

my $max_proj_name_len = 0;
my $max_branch_name_len = 0;

foreach my $pname ( keys %project ){
  my $p = $project{$pname};
  foreach my $bname ( keys %{$p->{branch}} ){
    next unless length( $bname ) > $max_branch_name_len;
    $max_branch_name_len = length( $bname );
  }
  next unless length( $pname ) > $max_proj_name_len;
  $max_proj_name_len = length( $pname );
}

my $pnum = 1;
foreach my $pname ( sort keys %project ){
  if( $pname =~ m{^(.+)/([^/]+)$} ){
    my $dir = qq{${temp_dir}/$1};
    system(qq{mkdir -p $dir});
    chdir( $dir );
  }else{
    chdir( $temp_dir );
  }
  my $p = $project{$pname};
  my $num_branches = scalar keys %{$p->{branch}};

  next unless $num_branches > 0;

  my $gerrit_url = qq{ssh://${gerrit_host}:${gerrit_port}/${pname}};

  my $pdir = qq{${temp_dir}/${pname}};

#  system(qq{rm -rf ${pdir}}); # TODO: remove this

  my $git_output = qx(git clone -q $gerrit_url 2>/dev/null) unless -d $pdir;
  chdir( $pdir );

  print STDERR "\n", sprintf( q{%2i/%i %s: %*i branch(es)}, $pnum, $num_projects, $pname, 2, $num_branches ), "\n";
  foreach my $bname ( sort keys %{$p->{branch}} ){
    $git_output = qx(git checkout -q ${bname});

    # create/checkout topic branch
    $git_output = qx(git checkout -q -b ${bname}_re-license 2>&1) // qx(git checkout -q ${bname}_re-license);

    # find files with old license
    my @matching_files = split(/\n/, qx(grep -rsil '${allseen_copyright_start}' .));
    my $num_matching_files = scalar @matching_files;

    if( $num_matching_files == 0 ){
      print STDERR sprintf(q{%*s: %4i files contain AllSeen copyright.  Skipping.}, $max_branch_name_len, $bname, 0), "\n";
      next;
    }

    print STDERR sprintf(q{%*s: %4i files contain AllSeen copyright.  Updating now}, $max_branch_name_len, $bname, $num_matching_files);

    my $i = 1;
    my $tenth = int( $num_matching_files / 10 );
    $tenth = 1 if $tenth < 1;
    foreach my $fname ( @matching_files ){
      open( my( $fh ), q{<}, $fname ) or die "couldn't open file ${fname}: $!";
      chomp( my @lines = <$fh> );
      close $fh;

      my $content = join($/, @lines);

      my( $comment_prefix, $line_prefix, $comment_suffix );

      my( $license_start_line ) = grep { /$allseen_copyright_start/ } @lines;
      my( $license_end_line ) = grep { /$allseen_copyright_end/ } @lines;

      my @new_license;

      if( defined $license_end_line && $license_start_line eq $license_end_line ){
        my $new_license = join(' ', @template_line);
        $content =~ s{$allseen_license_rx}{$new_license}ms;

      }elsif( $license_end_line ){
        # extract comment prefix, line prefix and comment suffix in use for this file
        my( $start_prefix, $start, $start_suffix ) =
          ( $license_start_line =~ /^(.*)($allseen_copyright_start)(.*)$/ );

        my( $end_prefix, $end, $end_suffix ) =
          ( $license_end_line =~ /^(.*)($allseen_copyright_end)(.*)$/ );

        $comment_prefix = $start_prefix;
        if ( defined $start_prefix && $start_prefix eq $end_prefix ) {
          $line_prefix = $start_prefix;
        } else {
          $line_prefix = $end_prefix;
          $comment_suffix = $end_suffix;
        }


        #      print STDERR (
        #                    "License start line: $license_start_line\n",
        #                    "License   end line: $license_end_line\n",
        #                    "Comment Prefix: [$comment_prefix]\n",
        #                    "Line prefix: [$line_prefix]\n",
        #                    "Comment Suffix: [$comment_suffix]\n",
        #                   ) if $DEBUG;

        my( $old_license ) = ( $content =~ m{$allseen_license_rx} );

        my @new_license = (
                           defined $comment_prefix ? $comment_prefix : (),
                           ( map { "${line_prefix}$_" } @template_line ),
                           defined $comment_suffix ? $comment_suffix : (),
                          );

        my $new_license = join("\n", @new_license);

        # replace old license with new text
        $content =~ s{$allseen_license_rx}{$new_license}ms;

      } else {
        $content =~ s{$allseen_copyright_start}{$new_copyright}ms;
      }

      open( $fh, q{>}, $fname ) or die "couldn't open file ${fname} for writing: $!";
      print $fh $content;
      close $fh;

      print STDERR '.' if $i % $tenth == 0 && $DEBUG;

      system( qq{git add '$fname'} );
      $i++;
    }
    print STDERR "\n" if $DEBUG;

    system( qq(cp $license_file .) );
    system( qq(git add $license_file_basename) );

    @matching_files = split(/\n/, qx(grep -rsil '${allseen_copyright_start}' .));
    $num_matching_files = scalar @matching_files;

    if( $num_matching_files > 0 ){
      print STDERR ( "files still contain copyright!\n",
                     join("\n", @matching_files),
                     "\n"
                   ) if $DEBUG;

      exit 1;
    }

    my $git_cmd = q{git log | head -1 | awk '{print $2}'};

    chomp( my( $last_git_commit ) = qx{$git_cmd} );

    $git_cmd = qq{git show $last_git_commit};

    chomp( my @commit_line = split($/, qx{$git_cmd}) );

    my $commit_msg = "-F $commit_template_file";
    if( $commit_line[1] =~ /cjcollier/ ||
        $commit_line[4] =~ /^Replace/ ||
        $commit_line[4] =~ /License/ ){
      $commit_msg .= ' --amend';
    }

    # commit or amend signed change
    system( "git commit -q -s $commit_msg" );

    # who's on first
    open( my( $dotgitreview_fh ), q{>}, '.gitreview' )
      or die 'could not open .gitreview for writing';

    print $dotgitreview_fh <<"EOF";
[gerrit]
host=git.allseenalliance.org
port=29418
project=${pname}
defaultbranch=${bname}
EOF

    # submit to gerrit
#    system( qq{git review} );
  }
  $pnum++;
}

END {
  chdir( $initial_cwd );
}
