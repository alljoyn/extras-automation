#!/usr/bin/perl -w
use strict;

my $DEBUG = 0;
use Data::Dumper;

use JSON::XS;
use LWP::UserAgent;
use HTML::TreeBuilder::XPath;

my $initial_cwd = $ENV{PWD};

my $json = JSON::XS->new->utf8->pretty;
my $ua = LWP::UserAgent->new;

my $allseen_copyright_start = 'Copyright AllSeen Alliance. All rights reserved.';
my $allseen_copyright_end = 'OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.';

my $allseen_license_rx = qr{(${allseen_copyright_start}.*${allseen_copyright_end})}ms;

my $xpath_query =
  {
   commit_info_date    => q{//table[@class="commit-info"]//tr[1]/td[@class="right"]},
   commit_info_subject => q{//div[@class="commit-subject"]},
  };

my $domain = q{allseenalliance.org};

my $gerrit_host = qq{git.$domain};
my $gerrit_port = 29418;

my $git_host = qq{cgit.$domain};

my( %project );

# Exceptions to filter out projects known not to be updating licenses can go here.
my $proj_skip_rx = qr{
                       (
                         ^All-Users$ |
                         ^$
                       )
                   }x;

my $repo_data_json_file = '/tmp/alljoyn-repos-data.json';
if( -f $repo_data_json_file ){
  my $json_str = do {
    open( my( $json_fh ), q{<}, $repo_data_json_file )
      or die "couldn't open json file $repo_data_json_file: $!";
    local undef $/;
    <$json_fh>;
  };
  %project = %{ $json->decode( $json_str ) };
}else{

  my @project = split(/\n/, qx{ssh -p ${gerrit_port} ${gerrit_host} gerrit ls-projects});

  foreach my $proj ( @project ){
    next if( $proj =~ /$proj_skip_rx/ );

    my %branch;

    $project{$proj} = { name => $proj,
                        branch => \%branch,
                      };

    print ("Project: [$proj]\n");

    my $gerrit_url = qq{ssh://${gerrit_host}:${gerrit_port}/${proj}};

    my $cgit_url = qq{https://${git_host}/${proj}.git};

    my @remote = split(/\n/, qx{git ls-remote --heads $gerrit_url});
    foreach my $remote (@remote){
      my($commit_id,$headname) = split(/\s+/, $remote);

      my($branch_name) = ($headname =~ m{refs/heads/(.+)});

      print ("  Branch: [$branch_name]\n");

      my $branch = {
                    id => $commit_id,
                    name => $branch_name,
                    date => undef,
                    subject => undef,
                   };

      my $url = "$cgit_url/commit/?id=${commit_id}";

      print STDERR qq{Now fetching url [$url]\n} if $DEBUG;
      my $response = $ua->get($url);

      print STDERR qq{Now parsing content as HTML\n} if $DEBUG;
      my $content = $response->decoded_content;

      my $tree = HTML::TreeBuilder::XPath->new;
      $tree->parse($content);
      $tree->eof;

      # Check for error
      my @error_element = $tree->findnodes( q{//*[@id="cgit"]/div[@class="content"]/div[@class="error"]} );

      if( @error_element ){
        print STDERR qq{Error with branch: }, $error_element[0]->content_array_ref->[0], "\n";
        next;
      }

      # extract date
      print STDERR qq{Now extracting date\n} if $DEBUG;
      $branch->{date} = $tree->findnodes( $xpath_query->{commit_info_date} )->[0]->content_array_ref->[0];
      print STDERR qq{Date string: [$branch->{date}]\n} if $DEBUG;

      # extract subject
      print STDERR qq{Now extracting subject\n} if $DEBUG;
      $branch->{subject} = $tree->findnodes( $xpath_query->{commit_info_subject} )->[0]->content_array_ref->[0];
      print STDERR qq{Subject string: [$branch->{subject}]\n} if $DEBUG;

      $tree = $tree->delete;

      next if( $branch->{subject} eq 'Initial empty repository' );

      $branch{$branch_name} = $branch;
    }
  }

  my $json_str = $json->encode( \%project );
  open( my($json_fh), q{>}, $repo_data_json_file )
    or die "couldn't open json file [$repo_data_json_file]: $!";

  print $json_fh $json_str;
}

print STDERR scalar keys %project, qq{ projects\n};

my $max_proj_name_len = 0;

foreach my $pname ( keys %project ){
  next unless length( $pname ) > $max_proj_name_len;
  $max_proj_name_len = length( $pname );
}

foreach my $pname ( keys %project ){
  if( $pname =~ m{^(.+)/([^/]+)$} ){
    my $dir = qq{/tmp/$1};
    system(qq{mkdir -p $dir});
    chdir( $dir );
  }else{
    chdir( '/tmp' );
  }
  my $p = $project{$pname};
  print STDERR sprintf( q{%*s: %*i branch(es)}, $max_proj_name_len, $pname, 2, scalar keys %{$p->{branch}} ), "\n";

  my $gerrit_url = qq{ssh://${gerrit_host}:${gerrit_port}/${pname}};

  my $pdir = qq{/tmp/${pname}};

  # === REMOVE FOLLOWING AFTER TESTING ===
  # During testing, remove directory before cloning
  use File::Path;
  File::Path::remove_tree($pdir) if -d $pdir;
  # === REMOVE PRECEEDING AFTER TESTING ===

  my $git_output = qx(git clone $gerrit_url);
  chdir( $pdir );

  foreach my $bname ( keys %{$p->{branch}} ){
    $git_output = qx(git checkout ${bname});
    # TODO: create/checkout topic branch
    $git_output = qx(git checkout -b ${bname}_re-license);
    # TODO: find files with old license
    my @matching_files = split(/\n/, qx(grep -rsil '${allseen_copyright_start}' .));
    foreach my $fname ( @matching_files ){

      open( my( $fh ), q{<}, $fname );
      my @lines = <$fh>;
      my $content = join('\n', @lines);

      my( $comment_prefix, $line_prefix, $comment_suffix );

      if( $fname =~ /\.[ch]$/ ){
        $comment_prefix = '// ';
        $comment_suffix = 'c';
      }elsif( $fname =~ /^Scons/ ){
        $comment_mode = 'bash';
      }else{
        my( $license_start_line ) = grep { /$allseen_copyright_start/ } @lines;
        my( $start_prefix, $start, $start_suffix ) =
          ( $license_begin_line =~ /^(.*)($allseen_copyright_start)(.*)$/ );

        my( $license_end_line ) = grep { /$allseen_copyright_end/ } @lines;
        my( $end_prefix, $end, $end_suffix ) =
          ( $license_end_line =~ /^(.*)($allseen_copyright_end)(.*)$/ );

        # extract comment prefix, line prefix and comment suffix in use for this file

        $comment_prefix = $start_prefix;
        if( $start_prefix eq $end_prefix ){
          $line_prefix = $start_prefix;
        }else{
          $line_prefix = $end_prefix;
          $comment_suffix = $end_suffix;
        }
      }
      # TODO: replace old license with new text
      $content =~ s{$allseen_license_rx}{}
    }
    exit 0;
    # TODO: add changed files
    # TODO: commit signed change
    # TODO: git review --track ${bname}
  }

}

END {
  chdir( $initial_cwd );
}
