<?xml version="1.0" encoding="utf-8"?>
<project name="Deploy SDK for Windows" default="zip" >

    <!-- properties -->

    <tstamp/>

    <property file="${basedir}/build.properties" />
    <property name="workingDir"             location="${user.dir}" />

    <property name="releaseVersion"         value="0.0.1" />
    <property name="scons.cpu"              value="x86_64" />
    <condition property="msvsTag" value="vs2010" >
        <contains string="${scons.msvc}" substring="10" />
    </condition>
    <condition property="msvsTag" value="vs2012" >
        <contains string="${scons.msvc}" substring="11" />
    </condition>
    <condition property="msvsTag" value="vs2013" >
        <contains string="${scons.msvc}" substring="12" />
    </condition>
    <condition property="msvsTag" value="vs2015" >
        <contains string="${scons.msvc}" substring="14" />
    </condition>
    <condition property="cpuTag" value="x64" else="x86" >
        <contains string="${scons.cpu}" substring="64" />
    </condition>
    <property name="sdkName"                value="alljoyn-${releaseVersion}-${scons.os}${cpuTag}${msvsTag}-sdk" />

    <property name="sconsDir"               location="${workingDir}" />
    <property name="sconsDist.dbg"          location="${sconsDir}/build/${scons.os}/${scons.cpu}/debug/dist" />
    <property name="sconsDist.rel"          location="${sconsDir}/build/${scons.os}/${scons.cpu}/release/dist" />

    <property name="sdkWork"                location="${workingDir}/sdks" />
    <property name="sdkDir"                 location="${sdkWork}/${sdkName}" />
    <property name="sdkZip"                 location="${sdkWork}/${sdkName}.zip" />
    <property name="sdkToc"                 location="${sdkWork}/${sdkName}.txt" />
    <property name="sdkDist.dbg"            location="${sdkDir}/${sdkName}-dbg" />
    <property name="sdkDist.rel"            location="${sdkDir}/${sdkName}-rel" />

    <property name="genversion"             location="${sconsDir}/build_core/tools/scons/genversion.py" />
    <property name="gitDir"                 location="${sconsDir}/.git" />
    <property name="manifest.dbg"           location="${sconsDist.dbg}/manifest.txt" />
    <property name="manifest.rel"           location="${sconsDist.rel}/manifest.txt" />
    <condition property="doManifest" >
        <and>
            <available file="${genversion}" type="file" />
            <available file="${gitDir}" type="dir" />
        </and>
    </condition>

    <property name="etcDir"                 location="${basedir}/etc" />
    <property name="unwantedList"           location="${etcDir}/unwanted.list" />
    <property name="extrasDir"              location="${basedir}/extras" />

    <available property="extrasDir.exists"  file="${extrasDir}" type="dir" />
    <available property="extrasList.exists" file="${extrasList}" type="file" />

    <defaultexcludes add="**/.repo" />
    <defaultexcludes add="**/.sconsign.dblite" />

    <!-- custom tasks -->

    <macrodef name="xcp" description="Deploy any subtree, giving fileset elements" >
        <attribute name="argv1" description="from path" />
        <attribute name="argv2" description="to path" />
        <attribute name="argv3" description="force option, true or false" default="true" />
        <element name="fileset-elements" implicit="yes"/>
        <sequential>
            <echo level="verbose" message="xcp @{argv1} @{argv2} @{argv3}" />
            <mkdir dir="@{argv2}" />
            <copy todir="@{argv2}" preservelastmodified="true" overwrite="@{argv3}" force="@{argv3}" >
                <fileset dir="@{argv1}" >
                    <fileset-elements/>
                </fileset>
            </copy>
        </sequential>
    </macrodef> <!-- xcp -->

    <macrodef name="xDist" description="Deploy one Dist" >
        <attribute name="argv1" description="variant tag: dbg or rel" />
        <sequential>
            <echo level="verbose" message="xDist @{argv1}" />
            <xcp  argv1="${sconsDist.@{argv1}}" argv2="${sdkDist.@{argv1}}" >
                <include name="**" />
                <excludesfile name="${unwantedList}" />
            </xcp>
            <xcp  argv1="${sconsDir}" argv2="${sdkDist.@{argv1}}" >
                <include name="README.md" />
            </xcp>
        </sequential>
    </macrodef> <!-- xDist -->

    <macrodef name="xcpExtras" description="Deploy optional extras into a Dist, with force" >
        <attribute name="argv1" description="to path" />
        <sequential>
            <echo level="verbose" message="xcpExtras @{argv1}" />
            <xcp  argv1="${extrasDir}" argv2="@{argv1}" >
                <include name="**" unless="${extrasList.exists}" />
                <includesfile name="${extrasList}" if="${extrasList.exists}" />
            </xcp>
        </sequential>
    </macrodef> <!-- xcpExtras -->

    <macrodef name="xSpecial" description="special purpose" >
        <attribute name="argv1" description="upper dir" />
        <attribute name="argv2" description="lower dir" />
        <attribute name="argv3" description="output property name" />
        <sequential>

            <local name="argv1.parent" />
            <dirname property="argv1.parent" file="@{argv1}" />

            <delete file="${sdkTmp}" />
            <echo force="true" file="${sdkTmp}">@{argv2}</echo>

            <loadfile property="@{argv3}" srcFile="${sdkTmp}">
                <filterchain>
                    <tokenfilter>
                        <replacestring from="${argv1.parent}${file.separator}" to="" />
                        <replacestring from="${file.separator}" to="/" />
                    </tokenfilter>
                </filterchain>
            </loadfile>
            <delete file="sdkTmp" />

        </sequential>
    </macrodef> <!-- xSpecial -->

    <macrodef name="xToc" description="Generate a list of files contained in the sdk" >
        <attribute name="argv1" description="from path" />
        <attribute name="argv2" description="to file" />
        <attribute name="argv3" description="absolute path to replace in the output list" />
        <attribute name="argv4" description="symbolic replacement for argv3 in the output list" />
        <attribute name="argv5" description="extra fileset element to include" default="**/docs/html/index.html" />
        <element name="fileset-elements" implicit="yes"/>
        <sequential>

            <echo level="verbose" message="xtoc @{argv1} @{argv2} @{argv3} @{argv4}" />

            <local name="xtoct" />
            <local name="xtocp" />
            <xSpecial argv1="@{argv1}" argv2="@{argv3}" argv3="xtocp" />

            <pathconvert property="xtoct" pathsep="${line.separator}" dirsep="/" >
                <sort>
                    <union>
                        <fileset dir="@{argv1}" >
                            <fileset-elements/>
                            <exclude name="**/docs/html/**" />
                        </fileset>
                        <fileset dir="@{argv1}" >
                            <include name="@{argv5}" />
                        </fileset>
                    </union>
                    <name />
                </sort>
                <map from="@{argv3}/" to="$@{argv4}/" />
            </pathconvert>

            <echo level="verbose" >xtoct:${line.separator}#@{argv4}=${xtocp}${line.separator}${xtoct}${line.separator}</echo>
            <echo file="@{argv2}" force="true" append="true" >#@{argv4}=${xtocp}${line.separator}${xtoct}${line.separator}</echo>

        </sequential>
    </macrodef> <!-- xToc -->

    <!-- targets -->

    <target name="init" >
 
        <echo>
scons.os        ${scons.os}
scons.cpu       ${scons.cpu}
sconsDir        ${sconsDir}
sconsDist.dbg   ${sconsDist.dbg}
doManifest      ${doManifest}

releaseVersion  ${releaseVersion}
sdkDir          ${sdkDir}
sdkZip          ${sdkZip}
sdkToc          ${sdkToc}

scons.msvc      ${scons.msvc}
msvsTag         ${msvsTag}</echo>
        <echo level="verbose" >
basedir         ${basedir}
workingDir      ${workingDir}

scons.os        ${scons.os}
scons.cpu       ${scons.cpu}
sconsDir        ${sconsDir}
sconsDist.dbg   ${sconsDist.dbg}
sconsDist.rel   ${sconsDist.rel}

releaseVersion  ${releaseVersion}
sdkName         ${sdkName}
sdkWork         ${sdkWork}
sdkDir          ${sdkDir}
sdkDist.dbg     ${sdkDist.dbg}
sdkDist.rel     ${sdkDist.rel}
sdkZip          ${sdkZip}
sdkToc          ${sdkToc}

genversion      ${genversion}
manifest.dbg    ${manifest.dbg}
manifest.rel    ${manifest.rel}
doManifest      ${doManifest}

etcDir          ${etcDir}
unwantedList    ${unwantedList}

extrasDir       ${extrasDir}
extrasList      ${extrasList}
extrasDir.exists    ${extrasDir.exists}
extrasList.exists   ${extrasList.exists}</echo>

        <fail message="available checks failed" status="1" >
            <condition>
                <not>
                    <and>
                        <available file="${sconsDir}"       type="dir" />
                        <available file="${sconsDist.dbg}"  type="dir" />
                        <available file="${sconsDist.rel}"  type="dir" />
                        <available file="${unwantedList}"   type="file" />
                        <!-- extras are optional -->
                    </and>
                </not>
            </condition>
        </fail>

        <fail message="contains checks failed" status="1" >
            <condition>
                <or>
                    <contains string="${sconsDir}/build/${scons.os}"    substring="${sdkDir}" />
                    <contains string="${sconsDist.dbg}"                 substring="${sconsDist.rel}" />
                    <contains string="${sconsDist.rel}"                 substring="${sconsDist.dbg}" />
                    <not>
                        <contains string="${sdkDist.dbg}"               substring="${sdkDir}" />
                    </not>
                    <not>
                        <contains string="${sdkDist.rel}"               substring="${sdkDir}" />
                    </not>
                </or>
            </condition>
        </fail>

        <fail message="extrasList.exists but not extrasDir.exists" status="1" >
            <condition>
                <and>
                    <isset property="extrasList.exists" />
                    <not>
                        <isset property="extrasDir.exists" />
                    </not>
                </and>
            </condition>
        </fail>

        <fail message="extrasList.exists but no files found" status="1" >
            <condition>
                <and>
                    <isset property="extrasList.exists" />
                    <resourcecount count="0" >
                        <fileset dir="${extrasDir}" >
                            <includesfile name="${extrasList}" />
                        </fileset>
                    </resourcecount>
                </and>
            </condition>
        </fail>

    </target> <!-- init -->

    <target name="manifest" depends="init" if="${doManifest}" >
        <local  name="gitVersion" />
        <exec executable="python" dir="${sconsDir}" outputproperty="gitVersion" logError="true" inputstring="" searchpath="true" failonerror="true" >
            <arg value="${genversion}" />
        </exec>
        <echo file="${manifest.dbg}" force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.rel}" force="true" >${gitVersion}${line.separator}</echo>
        <echo>
gitVersion  ${gitVersion}
        </echo>
    </target>

    <target name="clean" depends="manifest" >
        <local name="sdkDir.parent" />
        <local name="sdkZip.parent" />
        <dirname property="sdkDir.parent" file="${sdkDir}" />
        <dirname property="sdkZip.parent" file="${sdkZip}" />
        <mkdir dir="${sdkDir.parent}" />
        <mkdir dir="${sdkZip.parent}" />
        <delete dir="${sdkDir}" />
        <delete file="${sdkZip}" />
        <delete file="${sdkToc}" />
    </target>

    <target name="dist" depends="clean" >
        <xDist argv1="dbg" />
        <xDist argv1="rel" />
    </target>

    <target name="extras" depends="dist" if="${extrasDir.exists}" >
        <xcpExtras argv1="${sdkDist.dbg}" />
        <xcpExtras argv1="${sdkDist.rel}" />
    </target>

    <target name="toc" depends="extras" >
        <local name="sdkDist.dbg.parent" />
        <local name="sdkDist.dbg.name" />
        <dirname property="sdkDist.dbg.parent" file="${sdkDist.dbg}" />
        <basename property="sdkDist.dbg.name" file="${sdkDist.dbg}" />
        <local name="sdkDist.rel.parent" />
        <local name="sdkDist.rel.name" />
        <dirname property="sdkDist.rel.parent" file="${sdkDist.rel}" />
        <basename property="sdkDist.rel.name" file="${sdkDist.rel}" />

        <delete file="${sdkToc}" />
        <xToc argv1="${sdkDist.dbg.parent}" argv2="${sdkToc}" argv3="${sdkDist.dbg}" argv4="DIST_dbg" argv5="${sdkDist.dbg.name}/**/docs/html/index.html" >
            <include name="${sdkDist.dbg.name}/**" />
        </xToc>
        <xToc argv1="${sdkDist.rel.parent}" argv2="${sdkToc}" argv3="${sdkDist.rel}" argv4="DIST_rel" argv5="${sdkDist.rel.name}/**/docs/html/index.html" >
            <include name="${sdkDist.rel.name}/**" />
        </xToc>
        <echo>${sdkToc} is ready</echo>
    </target>

    <target name="zip" depends="toc" >
        <local name="sdkDir.name" />
        <basename property="sdkDir.name" file="${sdkDir}" />
        <zip destfile="${sdkZip}" whenempty="fail" duplicate="fail" encoding="UTF-8" createUnicodeExtraFields="always" >
            <zipfileset dir="${sdkDir}" prefix="${sdkDir.name}" />
        </zip>
        <echo>${sdkZip} is ready</echo>
        <delete dir="${sdkDir}" />
    </target>

</project>
