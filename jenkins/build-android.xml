<?xml version="1.0" encoding="utf-8"?>
<project name="Deploy SDK for Android" default="zip" >

    <!-- properties -->

    <tstamp>
        <format property="xtstamp"          pattern="yyyyMMdd-HHmmss-SSS" />
    </tstamp>

    <property file="${basedir}/build.properties" />
    <property name="workingDir"             location="${user.dir}" />

    <property name="releaseVersion"         value="0.0.1" />
    <property name="scons.os"               value="android" />
    <property name="scons.cpu"              value="arm" />
    <property name="scons.variant"          value="debug" />
    <condition property="binTag" value="dbg" else="rel" >
        <contains string="${scons.variant}" substring="debug" />
    </condition>
    <property name="sdkName"                value="alljoyn-${releaseVersion}-android-sdk-${binTag}" />
    <property name="scons.br"               value="on" />
    <condition property="sdkToc.excludes"   value="**/docs/html/**" else="**/docs/html/**" >
        <!--
            BR=off has nothing to do with excluding docs/html from the Toc comparison.
            **/docs/html/** are always excluded because Doxygen generated API docs are unpredictable.
            It is convenient to define **/docs/html/** here in this property,
            because additional strings could be added here if BR=off
        -->
        <contains string="${scons.br}"      substring="off" />
    </condition>

    <property name="sconsDir"               location="${workingDir}" />
    <property name="sconsDist"              location="${sconsDir}/build/${scons.os}/${scons.cpu}/${scons.variant}/dist" />

    <property name="sdkWork"                location="${workingDir}/sdks" />
    <property name="sdkTmp"                 location="${sdkWork}/z-${user.name}-${xtstamp}" />
    <property name="sdkDir"                 location="${sdkWork}/alljoyn-android" />
    <property name="sdkDist"                location="${sdkDir}/core/alljoyn-${releaseVersion}-${binTag}" />
    <property name="sdkZip"                 location="${sdkWork}/${sdkName}.zip" />
    <property name="sdkToc"                 location="${sdkWork}/${sdkName}.txt" />

    <property name="genversion"             location="${sconsDir}/build_core/tools/scons/genversion.py" />
    <property name="gitDir"                 location="${sconsDir}/.git" />
    <property name="manifest"               location="${sconsDist}/manifest.txt" />
    <condition property="doManifest" >
        <and>
            <available file="${genversion}" type="file" />
            <available file="${gitDir}" type="dir" />
        </and>
    </condition>

    <property name="etcDir"                 location="${basedir}/etc" />
    <property name="unwantedList"           location="${etcDir}/unwanted.list" />
    <property name="extrasDir"              location="${basedir}/extras" />

    <available property="extrasDir.exists"  file="${extrasDir}" type="dir" />
    <available property="extrasList.exists" file="${extrasList}" type="file" />

    <defaultexcludes add="**/.repo" />
    <defaultexcludes add="**/.sconsign.dblite" />

    <!-- custom tasks -->

    <macrodef name="xcp" description="Deploy any subtree, giving fileset elements" >
        <attribute name="argv1" description="from path" />
        <attribute name="argv2" description="to path" />
        <attribute name="argv3" description="force option, true or false" default="true" />
        <element name="fileset-elements" implicit="yes"/>
        <sequential>
            <echo level="verbose" message="xcp @{argv1} @{argv2} @{argv3}" />
            <mkdir dir="@{argv2}" />
            <copy todir="@{argv2}" preservelastmodified="true" overwrite="@{argv3}" force="@{argv3}" >
                <fileset dir="@{argv1}" >
                    <fileset-elements/>
                </fileset>
            </copy>
        </sequential>
    </macrodef> <!-- xcp -->

    <macrodef name="xcpio" description="Deploy any subtree, giving fileset elements, with Unix commands not Ant tasks" >
        <attribute name="argv1" description="from path" />
        <attribute name="argv2" description="to path" />
        <attribute name="argv3" description="hardlink option, true or false" default="true" />
        <element name="fileset-elements" implicit="yes"/>
        <sequential>

            <local name="xcpiot"/>
            <local name="hardlink"/>

            <echo level="verbose" message="xcpio @{argv1} @{argv2} @{argv3}" />

            <fileset dir="@{argv1}" id="xcpiot" >
                <fileset-elements/>
            </fileset>
            <pathconvert property="xcpiot" refid="xcpiot" pathsep="${line.separator}" >
                <map from="@{argv1}/" to="" />
            </pathconvert>
            <delete file="${sdkTmp}-xcpiot" />
            <echo file="${sdkTmp}-xcpiot" force="true" >${xcpiot}${line.separator}</echo>

            <condition property="hardlink" value="lu" else="u" >
                <istrue value="@{argv3}"/>
            </condition>

            <mkdir dir="@{argv2}" />
            <echo>cd "@{argv1}"${line.separator}cpio &lt; xcpiot -pmd${hardlink} "@{argv2}"</echo>
            <echo level="verbose" >xcpiot:${line.separator}${xcpiot}${line.separator}</echo>
            <exec  dir="@{argv1}" executable="cpio" input="${sdkTmp}-xcpiot" failonerror="true" searchpath="true" >
                <arg value="-pmd${hardlink}" />
                <arg value="@{argv2}" />
            </exec>
            <delete file="${sdkTmp}-xcpiot" />

        </sequential>
    </macrodef> <!-- xcpio -->

    <macrodef name="xzip" description="zip a subtree with Unix commands not Ant tasks" >
        <attribute name="argv1" description="from path" />
        <attribute name="argv2" description="to Zip file" />
        <sequential>
            <local name="argv1.parent"/>
            <local name="argv1.name"/>
            <echo level="verbose" message="xzip @{argv1} @{argv2}" />
            <dirname  property="argv1.parent" file="@{argv1}" />
            <basename property="argv1.name"   file="@{argv1}" />
            <delete file="@{argv2}" />
            <echo>cd "${argv1.parent}"${line.separator}zip -q -r "@{argv2}" "${argv1.name}"</echo>
            <exec  dir="${argv1.parent}" executable="zip" inputstring="" failonerror="true" searchpath="true" >
                <arg value="-q" />
                <arg value="-r" />
                <arg value="@{argv2}" />
                <arg value="${argv1.name}" />
            </exec>
        </sequential>
    </macrodef> <!-- xzip -->

    <macrodef name="xDist" description="Deploy one Dist" >
        <sequential>
            <echo level="verbose" message="xDist" />
            <xcpio argv1="${sconsDist}" argv2="${sdkDist}" >
                <include name="**" />
                <excludesfile name="${unwantedList}" />
            </xcpio>
            <xcp argv1="${sconsDir}" argv2="${sdkDist}" >
                <include name="README.md" />
            </xcp>
        </sequential>
    </macrodef> <!-- xDist -->

    <macrodef name="xcpExtras" description="Deploy optional extras into a Dist, with force" >
        <attribute name="argv1" description="to path" />
        <sequential>
            <echo level="verbose" message="xcpExtras @{argv1}" />
            <xcpio argv1="${extrasDir}" argv2="@{argv1}" >
                <include name="**" unless="${extrasList.exists}" />
                <includesfile name="${extrasList}" if="${extrasList.exists}" />
            </xcpio>
        </sequential>
    </macrodef> <!-- xcpExtras -->

    <macrodef name="xSpecial" description="special purpose" >
        <attribute name="argv1" description="upper dir" />
        <attribute name="argv2" description="lower dir" />
        <attribute name="argv3" description="output property name" />
        <sequential>

            <local name="argv1.parent" />
            <dirname property="argv1.parent" file="@{argv1}" />

            <delete file="${sdkTmp}-xtoc" />
            <echo force="true" file="${sdkTmp}-xtoc">@{argv2}</echo>

            <loadfile property="@{argv3}" srcFile="${sdkTmp}-xtoc">
                <filterchain>
                    <tokenfilter>
                        <replacestring from="${argv1.parent}/" to="" />
                    </tokenfilter>
                </filterchain>
            </loadfile>
            <delete file="${sdkTmp}-xtoc" />

        </sequential>
    </macrodef> <!-- xSpecial -->

    <macrodef name="xToc" description="Generate a list of files contained in the sdk" >
        <attribute name="argv1" description="from path" />
        <attribute name="argv2" description="to file" />
        <attribute name="argv3" description="absolute path to replace in the output list" />
        <attribute name="argv4" description="symbolic replacement for argv3 in the output list" />
        <attribute name="argv5" description="includes path prefix" default="" />
        <attribute name="argv6" description="excludes patterns" default="${sdkToc.excludes}" />
        <sequential>

            <echo level="verbose" message="xtoc @{argv1} @{argv2} @{argv3} @{argv4} @{argv5} @{argv6}" />

            <local name="xtoct" />
            <local name="xtocp" />
            <xSpecial argv1="@{argv1}" argv2="@{argv3}" argv3="xtocp" />

            <pathconvert property="xtoct" pathsep="${line.separator}" >
                <sort>
                    <union>
                        <fileset dir="@{argv1}" includes="@{argv5}**" excludes="@{argv6}" />
                        <!-- always include index.html from Doxygen generated API docs- one file represents the entire subdir -->
                        <fileset dir="@{argv1}" includes="@{argv5}**/docs/html/index.html" />
                    </union>
                    <name />
                </sort>
                <map from="@{argv3}/" to="$@{argv4}/" />
            </pathconvert>

            <echo level="verbose" >xtoct:${line.separator}#@{argv4}=${xtocp}${line.separator}${xtoct}${line.separator}</echo>
            <echo file="@{argv2}" force="true" append="true" >#@{argv4}=${xtocp}${line.separator}${xtoct}${line.separator}</echo>

        </sequential>
    </macrodef> <!-- xToc -->

    <!-- targets -->

    <target name="init" >

        <echo>
scons.os        ${scons.os}
scons.variant   ${scons.variant}
sconsDir        ${sconsDir}
sconsDist       ${sconsDist}
doManifest      ${doManifest}

releaseVersion  ${releaseVersion}
sdkDir          ${sdkDir}
sdkZip          ${sdkZip}
sdkToc          ${sdkToc}</echo>


        <echo level="verbose" >
basedir         ${basedir}
workingDir      ${workingDir}

scons.os        ${scons.os}
scons.cpu       ${scons.cpu}
scons.variant   ${scons.variant}
scons.br        ${scons.br}
sconsDir        ${sconsDir}
sconsDist       ${sconsDist}

releaseVersion  ${releaseVersion}
sdkName         ${sdkName}
sdkWork         ${sdkWork}
sdkTmp          ${sdkTmp}
sdkDir          ${sdkDir}
sdkDist         ${sdkDist}
sdkZip          ${sdkZip}
sdkToc          ${sdkToc}

genversion      ${genversion}
manifest        ${manifest}
doManifest      ${doManifest}

etcDir          ${etcDir}
unwantedList    ${unwantedList}

extrasDir       ${extrasDir}
extrasList      ${extrasList}
extrasDir.exists    ${extrasDir.exists}
extrasList.exists   ${extrasList.exists}</echo>

        <fail message="available checks failed" status="1" >
            <condition>
                <not>
                    <and>
                        <available file="${sconsDir}"       type="dir" />
                        <available file="${sconsDist}"      type="dir" />
                        <available file="${unwantedList}"   type="file" />
                        <!-- extras are optional -->
                    </and>
                </not>
            </condition>
        </fail>

        <fail message="contains checks failed" status="1" >
            <condition>
                <or>
                    <contains string="${sconsDir}/build/${scons.os}"    substring="${sdkDir}" />
                    <not>
                        <contains string="${sdkDist}"                   substring="${sdkDir}" />
                    </not>
                </or>
            </condition>
        </fail>

        <fail message="extrasList.exists but not extrasDir.exists" status="1" >
            <condition>
                <and>
                    <isset property="extrasList.exists" />
                    <not>
                        <isset property="extrasDir.exists" />
                    </not>
                </and>
            </condition>
        </fail>

        <fail message="extrasList.exists but no files found" status="1" >
            <condition>
                <and>
                    <isset property="extrasList.exists" />
                    <resourcecount count="0" >
                        <fileset dir="${extrasDir}" >
                            <includesfile name="${extrasList}" />
                        </fileset>
                    </resourcecount>
                </and>
            </condition>
        </fail>

        <fail message="not linux or mac" status="1" >
            <condition>
                <not>
                    <or>
                        <os family="unix" />
                        <os family="mac" />
                    </or>
                </not>
            </condition>
        </fail>

    </target> <!-- init -->

    <target name="manifest" depends="init" if="${doManifest}" >
        <local  name="gitVersion" />
        <exec executable="python" dir="${sconsDir}" outputproperty="gitVersion" logError="true" inputstring="" searchpath="true" failonerror="true" >
            <arg value="${genversion}" />
        </exec>
        <echo file="${manifest}" force="true" >${gitVersion}${line.separator}</echo>
        <echo>
gitVersion  ${gitVersion}
        </echo>
    </target>

    <target name="clean" depends="manifest" >
        <local  name="sdkDir.parent" />
        <local  name="sdkZip.parent" />
        <local  name="sdkTmp.parent" />
        <dirname property="sdkDir.parent" file="${sdkDir}" />
        <dirname property="sdkZip.parent" file="${sdkZip}" />
        <dirname property="sdkTmp.parent" file="${sdkTmp}" />
        <mkdir  dir="${sdkDir.parent}" />
        <mkdir  dir="${sdkZip.parent}" />
        <mkdir  dir="${sdkTmp.parent}" />
        <delete dir="${sdkDir}" />
        <delete file="${sdkZip}" />
        <delete file="${sdkTmp}" />
        <delete file="${sdkToc}" />
    </target>

    <target name="dist" depends="apk" >
        <xDist />
    </target>

    <target name="extras" depends="dist" if="${extrasDir.exists}" >
        <xcpExtras argv1="${sdkDist}" />
    </target>

    <target name="toc" depends="extras" >
        <delete file="${sdkToc}" />
        <xToc argv1="${sdkDir}" argv2="${sdkToc}" argv3="${sdkDist}" argv4="DIST" />
        <echo>${sdkToc} is ready</echo>
    </target>

    <target name="zip" depends="toc" >
        <xzip argv1="${sdkDir}" argv2="${sdkZip}" />
        <echo>${sdkZip} is ready</echo>
        <delete dir="${sdkDir}" />
    </target>

<!-- apk build extension -->

    <!-- properties -->

    <property name="apkDir"                 location="${workingDir}/apks" />
    <property name="apkTmp"                 location="${apkDir}/z-${user.name}-${xtstamp}" />
    <property name="scons.crypto"           value="openssl" /> <!-- default=openssl for bw compatibility -->

    <!-- dev build slave settings
    <property environment="env" />
    <property name="ANDROID_SDK" location="${env.SDK_ROOT}" />
    <property name="ANDROID_SRC" location="${env.android_src}" />
    <property name="ANDROID_NDK" location="${env.android_ndk}" />
    <property name="ANDROID_TARGET_API" value="${env.android_target_api}" />
    <property name="ALLJOYN_KEYSTORE.keystore" location="/opt/AllJoyn_KeyStore/AllJoyn_KeyStore" />
    <property name="ALLJOYN_KEYSTORE.password" location="/opt/AllJoyn_KeyStore/.password" />
    <property name="ALLJOYN_KEYSTORE.alias"    value="alljoyn" />
    -->

    <!-- AllSeen build slave settings (rac-ord-asa-ci-android-1) -->
    <property name="ANDROID_SDK" location="/srv/jenkins/android-sdk" />
    <property name="ANDROID_SRC" location="/srv/jenkins/android-source" />
    <property name="ANDROID_NDK" location="/srv/jenkins/android-ndk" />
    <property name="ANDROID_TARGET_API" value="18" />
    <property name="ALLJOYN_KEYSTORE.keystore" location="/opt/keystore/rac-ord-asa-ci-android-1" />
    <property name="ALLJOYN_KEYSTORE.password" location="/opt/keystore/.password" />
    <property name="ALLJOYN_KEYSTORE.alias"    value="AllJoyn" />
    <property name="androidSupportV4.a"         location="${ANDROID_SDK}/extras/android/support/v4/android-support-v4.jar" />
    <property name="androidSupportV4.b"         location="${ANDROID_SDK}/extras/android/compatibility/v4/android-support-v4.jar" />

    <!-- targets -->

    <target name="init-apk" depends="init" >

        <condition property="androidSupportV4"  value="${androidSupportV4.a}" >
            <and>
                <not>
                    <isset property="androidSupportV4" />
                </not>
                <available file="${androidSupportV4.a}" />
            </and>
        </condition>
        <condition property="androidSupportV4"  value="${androidSupportV4.b}" >
            <and>
                <not>
                    <isset property="androidSupportV4" />
                </not>
                <available file="${androidSupportV4.b}" />
            </and>
        </condition>

        <condition property="doOpenssl" >
            <contains string="${scons.crypto}" substring="openssl" casesensitive="false" />
        </condition>
        <condition property="ALLJOYN_OPENSSL_LIBS" value="-L${apkDir}/cpp/lib -lcrypto" else="" >
            <isset property="doOpenssl" />
        </condition>

        <echo>
ANDROID_TARGET_API          ${ANDROID_TARGET_API}
scons.crypto                ${scons.crypto}</echo>

        <echo level="verbose" >
doOpenssl                   ${doOpenssl}
ANDROID_SRC                 ${ANDROID_SRC}
ALLJOYN_OPENSSL_LIBS        ${ALLJOYN_OPENSSL_LIBS}

ANDROID_NDK                 ${ANDROID_NDK}
ANDROID_SDK                 ${ANDROID_SDK}
androidSupportV4            ${androidSupportV4}
ALLJOYN_KEYSTORE.keystore   ${ALLJOYN_KEYSTORE.keystore}
ALLJOYN_KEYSTORE.password   ${ALLJOYN_KEYSTORE.password}
ALLJOYN_KEYSTORE.alias      ${ALLJOYN_KEYSTORE.alias}

apkDir                      ${apkDir}
apkTmp                      ${apkTmp}</echo>

        <fail message="sconsDist binary files available checks failed" >
            <condition>
                <not>
                    <and>
                        <available file="${sconsDist}/cpp/lib/liballjoyn.a" type="file" />
                        <available file="${sconsDist}/java/lib/liballjoyn_java.so" type="file" />
                        <available file="${sconsDist}/java/jar/alljoyn.jar" type="file" />
                    </and>
                </not>
            </condition>
        </fail>
        <fail message="ANDROID_SDK ANDROID_NDK available checks failed" >
            <condition>
                <not>
                    <and>
                        <available file="${ANDROID_SDK}" type="dir" />
                        <available file="${ANDROID_NDK}" type="dir" />
                        <available file="${androidSupportV4}" type="file" />
                    </and>
                </not>
            </condition>
        </fail>
        <fail message="scons.crypto=openssl, ANDROID_SRC available checks failed" >
            <condition>
                <and>
                    <isset property="doOpenssl" />
                    <not>
                        <available file="${ANDROID_SRC}/out/target/product/generic/system/lib/libcrypto.so" type="file" />
                    </not>
                </and>
            </condition>
        </fail>
        <fail message="ALLJOYN_KEYSTORE available checks failed" >
            <condition>
                <not>
                    <and>
                        <available file="${ALLJOYN_KEYSTORE.keystore}" type="file" />
                        <available file="${ALLJOYN_KEYSTORE.password}" type="file" />
                    </and>
                </not>
            </condition>
        </fail>
    </target>

    <target name="clean-apk" depends="init-apk,clean" >

        <local  name="apkDir.parent" />
        <local  name="apkTmp.parent" />
        <dirname property="apkDir.parent" file="${apkDir}" />
        <dirname property="apkTmp.parent" file="${apkTmp}" />
        <mkdir  dir="${apkDir.parent}" />
        <mkdir  dir="${apkTmp.parent}" />
        <delete dir="${apkDir}" />
        <delete file="${apkTmp}" />
        <mkdir  dir="${apkDir}" />
        <xcpio argv1="${sconsDist}" argv2="${apkDir}" argv3="false" >
            <include name="**" />
        </xcpio>
        <dirset id="ndkDirList" dir="${apkDir}" >
            <include name="cpp/alljoyn_android/**/*" />
            <include name="cpp/samples/**/*" />
            <present targetdir="${apkDir}" >
                <mapper type="glob" from="*" to="*/jni/Android.mk" />
            </present>
        </dirset>
        <dirset id="apkDirList" dir="${apkDir}" >
            <include name="cpp/alljoyn_android/**/*" />
            <include name="cpp/samples/**/*" />
            <include name="java/samples/**/*" />
        <!-- FIXME : remove when cpp/alljoyn_android/bundle_test/** is completely deleted -->
            <exclude name="cpp/alljoyn_android/bundle_test/**/*" />
        <!-- end : remove -->
            <present targetdir="${apkDir}" >
                <mapper type="glob" from="*" to="*/AndroidManifest.xml" />
            </present>
        </dirset>
        <pathconvert property="ndkDirList" refid="ndkDirList" pathsep="${line.separator}" />
        <pathconvert property="apkDirList" refid="apkDirList" pathsep="${line.separator}" />
        <echo message="ndkDirList=${line.separator}${ndkDirList}" />
        <echo message="apkDirList=${line.separator}${apkDirList}" />
    </target>

    <target name="alljoyn-openssl-libs" depends="clean-apk" if="doOpenssl" >
        <xcpio argv1="${ANDROID_SRC}/out/target/product/generic/system/lib" argv2="${apkDir}/cpp/lib" argv3="false" >
            <include name="libcrypto.so" />
            <include name="libssl.so" />    <!-- only need for bw compatibility w core/alljoyn before Gerrit ID I9639a667028c494643de1221669ba48f450d7d72 -->
        </xcpio>
    </target>

    <target name="ndk" depends="alljoyn-openssl-libs" >
        <local name="stderr" />
        <local name="script" />
        <delete file="${apkTmp}-script.sh" />
        <delete file="${apkTmp}-stderr.log" />
        <delete file="${apkTmp}-warning.log" />
        <echo file="${apkTmp}-script.sh" force="true" ><![CDATA[
set +e
(
set -ex
cd "$1"

echo : ===
echo : PWD $PWD
echo : ===

export PATH="${ANDROID_NDK}:$PATH"

t=jni/Android.mk
if test -f $t
then
    echo : check min and max SdkVersion against target api level ${ANDROID_TARGET_API}

    t=AndroidManifest.xml
    if ls -ld $t
    then
        if ( xpath -q -e '/manifest/uses-sdk/@android:minSdkVersion' $t | grep . )
        then
            if ( xpath -q -e "/manifest/uses-sdk[@android:minSdkVersion>'${ANDROID_TARGET_API}']" $t | grep -q . )
            then
                echo : minSdkVersion greater than ${ANDROID_TARGET_API} : skip this app
                exit 0
            fi
        fi
        if ( xpath -q -e '/manifest/uses-sdk/@android:maxSdkVersion' $t | grep . )
        then
            if ( xpath -q -e "/manifest/uses-sdk[@android:maxSdkVersion<'${ANDROID_TARGET_API}']" $t | grep -q . )
            then
                echo : maxSdkVersion less than ${ANDROID_TARGET_API} : skip this app
                exit 0
            fi
        fi
    else
        echo : warning: expected file not found : $t
    fi

    echo : set APP_OPTIM in Application.mk correctly for variant=${scons.variant}

    t=jni/Application.mk
    if ls -ld $t
    then
        cp -p $t $t.prev

        awk '
$0 ~ /^[\t ]*APP_OPTIM[\t ]*:=[\t ]*(release|debug)[\t ]*$/   { print "APP_OPTIM := '${scons.variant}'"; next; }
{ print; }' < $t > $t.next

        if diff -w $t $t.next
        then
            : no change
        else
            echo : update $t
            cp -p $t.next $t
        fi
        rm -f $t.prev $t.next
    else
        echo : warning: expected file not found : $t
    fi

    echo : ndk-build

    ndk-build 1>&2 2>&3
else
    echo : error: expected file not found : $t
    exit 1
fi
) </dev/null 2>"${apkTmp}-stderr.log" 3>"${apkTmp}-warning.log" ; xit=$?

cat "${apkTmp}-warning.log"

case $xit in
( 0 )
    echo : =======
    echo : Success
    echo : =======
    ;;
( * )
    echo : ============
    echo : BUILD FAILED exit status $xit
    echo : ============
    ;;
esac

case $xit in
( 0 )
    ;;
( * )
    echo : ======
    echo : stderr
    echo : ======
    cat "${apkTmp}-stderr.log"
    echo : ============
    echo : shell script
    echo : ============
    cat "${apkTmp}-script.sh"
    exit 1
    ;;
esac
]]></echo>
        <loadfile property="script" srcFile="${apkTmp}-script.sh" />
        <echo level="verbose" message="${line.separator}SCRIPT${line.separator}" >${script}</echo>
        <apply executable="bash" dir="${apkDir}" inputstring="" searchpath="true" failonerror="true" force="true" osfamily="unix" >
            <arg value="${apkTmp}-script.sh" />
            <env key="ALLJOYN_OPENSSL_LIBS" value="${ALLJOYN_OPENSSL_LIBS}" />
            <dirset refid="ndkDirList" />
        </apply>
        <loadfile property="stderr" srcFile="${apkTmp}-stderr.log" />
        <echo level="verbose" message="${line.separator}STDERR (last iteration only)${line.separator}" >${stderr}</echo>
        <delete file="${apkTmp}-script.sh" />
        <delete file="${apkTmp}-stderr.log" />
        <delete file="${apkTmp}-warning.log" />
    </target>

    <target name="apk" depends="ndk" >
        <local name="stderr" />
        <local name="script" />
        <delete file="${apkTmp}-script.sh" />
        <delete file="${apkTmp}-stderr.log" />
        <echo file="${apkTmp}-script.sh" force="true" ><![CDATA[
argv1="$1"
argv2="$2"
set +e
(
set -ex

export PATH="${ANDROID_SDK}/tools:${ANDROID_SDK}/platform-tools:${ANDROID_SDK}/build-tools/21.1.2:$PATH"

cd "$argv1"
echo : ===
echo : PWD $PWD
echo : ===

    rm -rf bin
    rm -rf "$argv2/bin"
    mkdir -p "$argv2/bin"

    echo : check min and max SdkVersion against target api level ${ANDROID_TARGET_API}

    t=AndroidManifest.xml
    if ls -ld $t
    then
        if ( xpath -q -e '/manifest/uses-sdk/@android:minSdkVersion' $t | grep . )
        then
            if ( xpath -q -e "/manifest/uses-sdk[@android:minSdkVersion>'${ANDROID_TARGET_API}']" $t | grep -q . )
            then
                echo : minSdkVersion greater than ${ANDROID_TARGET_API} : skip this app
                exit 0
            fi
        fi
        if ( xpath -q -e '/manifest/uses-sdk/@android:maxSdkVersion' $t | grep . )
        then
            if ( xpath -q -e "/manifest/uses-sdk[@android:maxSdkVersion<'${ANDROID_TARGET_API}']" $t | grep -q . )
            then
                echo : maxSdkVersion less than ${ANDROID_TARGET_API} : skip this app
                exit 0
            fi
        fi
    else
        echo : warning: expected file not found : $t
    fi

    echo : check for ndk-build

    if test -f jni/Android.mk
    then
        if ls -d libs/armeabi*/lib*.so
        then
            : ok
        else
            echo : error: expected file not found : lib/armeabi*/lib*.so
            exit 2
        fi
    fi

    echo : get Eclipse project name

    name=''
    t=.project
    if test -f "$t"
    then
        name=$( xpath -q -e '/projectDescription/name[1]' "$t" | sed -e 's,<[^<>]*>,,g' -e 's,^[ \t]*,,' -e 's,[ \t]*$,,' -e 's, ,_,g' -e '/^$/d' )
    else
        echo : error: expected file not found : $t
        exit 2
    fi
    if test -z "$name"
    then
        echo : error: project name not found
        exit 2
    else
        echo $name
    fi

    echo : android update project -t "android-${ANDROID_TARGET_API}" -n "$name"
    android 1>&2 update project -t "android-${ANDROID_TARGET_API}" -p . -n "$name"

    case "$name" in
    ( Event_Action_Browser | ContactsService )
        echo : android v4 support for app, $name
        cp "${androidSupportV4}" libs/android-support-v4.jar
        ;;
    esac

    echo : ant release
    ant 1>&2 release
    test -f "bin/$name-release-unsigned.apk" && mv -f "bin/$name-release-unsigned.apk" "bin/$name-unsigned.apk" || : ok

    echo : jarsigner "bin/$name-unsigned.apk"
    jarsigner 1>&2 -digestalg SHA1 -sigalg MD5withRSA -keystore "${ALLJOYN_KEYSTORE.keystore}" "bin/$name-unsigned.apk" "${ALLJOYN_KEYSTORE.alias}" < "${ALLJOYN_KEYSTORE.password}"

    echo : zipalign "bin/$name-unsigned.apk" "$argv2/bin/$name.apk"
    zipalign 1>&2 -v 4 "bin/$name-unsigned.apk" "$argv2/bin/$name.apk"
    ls -ld "$argv2/bin/$name.apk"

) 2>"${apkTmp}-stderr.log" ; xit=$?

case $xit in
( 0 )
    echo : =======
    echo : Success
    echo : =======
    ;;
( * )
    echo : ============
    echo : BUILD FAILED exit status $xit
    echo : ============
    ;;
esac

case $xit in
( 0 )
    ;;
( * )
    echo : ======
    echo : stderr
    echo : ======
    cat "${apkTmp}-stderr.log"
    echo : ============
    echo : shell script
    echo : ============
    cat "${apkTmp}-script.sh"
    exit 1
    ;;
esac
]]></echo>
        <loadfile property="script" srcFile="${apkTmp}-script.sh" />
        <echo level="verbose" message="${line.separator}SCRIPT${line.separator}" >${script}</echo>
        <apply executable="bash" dir="${apkDir}" dest="${sconsDist}" inputstring="" searchpath="true" failonerror="true" force="true" osfamily="unix" >
            <dirset refid="apkDirList" />
            <filtermapper>
                <replacestring from="${apkDir}" to="" />
            </filtermapper>
            <arg value="${apkTmp}-script.sh" />
            <srcfile />
            <targetfile />
        </apply>
        <loadfile property="stderr" srcFile="${apkTmp}-stderr.log" />
        <echo level="verbose" message="${line.separator}STDERR (last iteration only)${line.separator}" >${stderr}</echo>
        <delete file="${apkTmp}-script.sh" />
        <delete file="${apkTmp}-stderr.log" />
        <delete dir="${apkDir}" />
    </target>

</project>
