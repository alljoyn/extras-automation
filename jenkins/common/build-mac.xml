<?xml version="1.0" encoding="utf-8"?>
<project name="Deploy SDK for OS X/iOS" default="zip" >

    <!-- properties -->

    <tstamp>
        <format property="xtstamp"          pattern="yyyyMMdd-HHmmss-SSS" />
    </tstamp>

    <property file="${basedir}/build.properties" />
    <property name="workingDir"             location="${user.dir}" />

    <property name="releaseVersion"         value="0.0.1" />
    <property name="scons.os"               value="darwin" />
    <property name="sdkName"                value="alljoyn-${releaseVersion}-osx_ios-sdk" />

    <property name="sconsDir"               location="${workingDir}" />
    <property name="sconsDist.x86.dbg"      location="${sconsDir}/build/${scons.os}/x86/debug/dist" />
    <property name="sconsDist.x86.rel"      location="${sconsDir}/build/${scons.os}/x86/release/dist" />
    <property name="sconsDist.arm.dbg"      location="${sconsDir}/build/${scons.os}/arm/iphoneos/debug/dist" />
    <property name="sconsDist.arm.rel"      location="${sconsDir}/build/${scons.os}/arm/iphoneos/release/dist" />
    <property name="sconsDist.armv7.dbg"    location="${sconsDir}/build/${scons.os}/armv7/iphoneos/debug/dist" />
    <property name="sconsDist.armv7.rel"    location="${sconsDir}/build/${scons.os}/armv7/iphoneos/release/dist" />
    <property name="sconsDist.armv7s.dbg"   location="${sconsDir}/build/${scons.os}/armv7s/iphoneos/debug/dist" />
    <property name="sconsDist.armv7s.rel"   location="${sconsDir}/build/${scons.os}/armv7s/iphoneos/release/dist" />
    <property name="sconsDist.sim.dbg"      location="${sconsDir}/build/${scons.os}/arm/iphonesimulator/debug/dist" />
    <property name="sconsDist.sim.rel"      location="${sconsDir}/build/${scons.os}/arm/iphonesimulator/release/dist" />
    <!-- these props intentionally duplicate existing props -->
    <property name="sconsDist.arm386.dbg"   location="${sconsDir}/build/${scons.os}/arm/iphoneos/debug/dist" />
    <property name="sconsDist.arm386.rel"   location="${sconsDir}/build/${scons.os}/arm/iphoneos/release/dist" />
    <property name="sconsDist.sim386.dbg"   location="${sconsDir}/build/${scons.os}/arm/iphonesimulator/debug/dist" />
    <property name="sconsDist.sim386.rel"   location="${sconsDir}/build/${scons.os}/arm/iphonesimulator/release/dist" />

    <property name="genversion"             location="${sconsDir}/build_core/tools/scons/genversion.py" />
    <property name="gitDir"                 location="${sconsDir}/.git" />
    <property name="manifest"               location="${sconsDir}/manifest.txt" />
    <property name="manifest.x86.dbg"       location="${sconsDist.x86.dbg}/manifest.txt" />
    <property name="manifest.x86.rel"       location="${sconsDist.x86.rel}/manifest.txt" />
    <property name="manifest.arm.dbg"       location="${sconsDist.arm.dbg}/manifest.txt" />
    <property name="manifest.arm.rel"       location="${sconsDist.arm.rel}/manifest.txt" />
    <property name="manifest.armv7.dbg"     location="${sconsDist.armv7.dbg}/manifest.txt" />
    <property name="manifest.armv7.rel"     location="${sconsDist.armv7.rel}/manifest.txt" />
    <property name="manifest.armv7s.dbg"    location="${sconsDist.armv7s.dbg}/manifest.txt" />
    <property name="manifest.armv7s.rel"    location="${sconsDist.armv7s.rel}/manifest.txt" />
    <property name="manifest.sim.dbg"       location="${sconsDist.sim.dbg}/manifest.txt" />
    <property name="manifest.sim.rel"       location="${sconsDist.sim.rel}/manifest.txt" />
    <condition property="doManifest" >
        <and>
            <available file="${genversion}" type="file" />
            <available file="${gitDir}" type="dir" />
        </and>
    </condition>

    <property name="sdkWork"                location="${workingDir}/sdks" />
    <property name="sdkTmp"                 location="${sdkWork}/z-${user.name}-${xtstamp}" />
    <property name="sdkDir"                 location="${sdkWork}/${sdkName}" />
    <property name="sdkZip"                 location="${sdkWork}/${sdkName}.zip" />
    <property name="sdkDist.x86.dbg"        location="${sdkDir}/build/${scons.os}/x86/debug/dist" />
    <property name="sdkDist.x86.rel"        location="${sdkDir}/build/${scons.os}/x86/release/dist" />
    <property name="sdkDist.arm.dbg"        location="${sdkDir}/build/${scons.os}/arm/iphoneos/debug/dist" />
    <property name="sdkDist.arm.rel"        location="${sdkDir}/build/${scons.os}/arm/iphoneos/release/dist" />
    <property name="sdkDist.armv7.dbg"      location="${sdkDir}/build/${scons.os}/armv7/iphoneos/debug/dist" />
    <property name="sdkDist.armv7.rel"      location="${sdkDir}/build/${scons.os}/armv7/iphoneos/release/dist" />
    <property name="sdkDist.armv7s.dbg"     location="${sdkDir}/build/${scons.os}/armv7s/iphoneos/debug/dist" />
    <property name="sdkDist.armv7s.rel"     location="${sdkDir}/build/${scons.os}/armv7s/iphoneos/release/dist" />
    <property name="sdkDist.sim.dbg"        location="${sdkDir}/build/${scons.os}/arm/iphonesimulator/debug/dist" />
    <property name="sdkDist.sim.rel"        location="${sdkDir}/build/${scons.os}/arm/iphonesimulator/release/dist" />
    <property name="sdkDist.arm386.dbg"     location="${sdkDir}/build/${scons.os}/i386/iphoneos/debug/dist" />
    <property name="sdkDist.arm386.rel"     location="${sdkDir}/build/${scons.os}/i386/iphoneos/release/dist" />
    <property name="sdkDist.sim386.dbg"     location="${sdkDir}/build/${scons.os}/i386/iphonesimulator/debug/dist" />
    <property name="sdkDist.sim386.rel"     location="${sdkDir}/build/${scons.os}/i386/iphonesimulator/release/dist" />

    <property name="etcDir"                 location="${basedir}/etc" />
    <property name="unwantedList"           location="${etcDir}/unwanted.list" />
    <property name="extrasDir"              location="${basedir}/extras" />

    <available property="extrasDir.exists"  file="${extrasDir}" type="dir" />
    <available property="extrasList.exists" file="${extrasList}" type="file" />

    <defaultexcludes add="**/.repo" />
    <defaultexcludes add="**/.sconsign.dblite" />

    <!-- custom tasks -->

    <macrodef name="xcp" description="Deploy any subtree, giving fileset elements" >
        <attribute name="argv1" description="from path" />
        <attribute name="argv2" description="to path" />
        <attribute name="argv3" description="force option, true or false" default="true" />
        <element name="fileset-elements" implicit="yes"/>
        <sequential>
            <echo level="verbose" message="xcp @{argv1} @{argv2} @{argv3}" />
            <mkdir dir="@{argv2}" />
            <copy todir="@{argv2}" preservelastmodified="true" overwrite="@{argv3}" force="@{argv3}" >
                <fileset dir="@{argv1}" >
                    <fileset-elements/>
                </fileset>
            </copy>
        </sequential>
    </macrodef> <!-- xcp -->

    <macrodef name="xcpio" description="Deploy any subtree, giving fileset elements, with Unix commands not Ant tasks" >
        <attribute name="argv1" description="from path" />
        <attribute name="argv2" description="to path" />
        <element name="fileset-elements" implicit="yes"/>
        <sequential>

            <local name="xcpiot"/>
            <echo level="verbose" message="xcpio @{argv1} @{argv2}" />

            <fileset dir="@{argv1}" id="xcpiot" >
                <fileset-elements/>
            </fileset>
            <pathconvert property="xcpiot" refid="xcpiot" pathsep="${line.separator}" >
                <map from="@{argv1}/" to="" />
                <!-- <filtermapper> <replacestring from="${path.separator}" to="${line.separator}" /> </filtermapper> -->
            </pathconvert>
            <delete file="${sdkTmp}-xcpiot" />
            <echo file="${sdkTmp}-xcpiot" force="true" >${xcpiot}${line.separator}</echo>

            <mkdir dir="@{argv2}" />
            <echo>cd "@{argv1}"${line.separator}cpio &lt; xcpiot -pmdl "@{argv2}"</echo>
            <echo level="verbose" >xcpiot:${line.separator}${xcpiot}${line.separator}</echo>
            <exec  dir="@{argv1}" executable="cpio" input="${sdkTmp}-xcpiot" failonerror="true" searchpath="true" >
                <arg value="-pmdl" />
                <arg value="@{argv2}" />
            </exec>
            <delete file="${sdkTmp}-xcpiot" />

        </sequential>
    </macrodef> <!-- xcpio -->

    <macrodef name="xzip" description="zip a subtree with Unix commands not Ant tasks" >
        <attribute name="argv1" description="from path" />
        <attribute name="argv2" description="to Zip file" />
        <sequential>
            <local name="argv1.parent"/>
            <local name="argv1.name"/>
            <echo level="verbose" message="xzip @{argv1} @{argv2}" />
            <dirname  property="argv1.parent" file="@{argv1}" />
            <basename property="argv1.name"   file="@{argv1}" />
            <delete file="@{argv2}" />
            <echo>cd "${argv1.parent}"${line.separator}zip -q -r "@{argv2}" "${argv1.name}"</echo>
            <exec  dir="${argv1.parent}" executable="zip" inputstring="" failonerror="true" searchpath="true" >
                <arg value="-q" />
                <arg value="-r" />
                <arg value="@{argv2}" />
                <arg value="${argv1.name}" />
            </exec>
        </sequential>
    </macrodef> <!-- xzip -->

    <macrodef name="xDist" description="Deploy one Dist" >
        <attribute name="argv1" description="CPU/bin tag: x86, arm, armv7, armv7s, or sim" />
        <attribute name="argv2" description="variant tag: dbg or rel" />
        <sequential>
            <echo level="verbose" message="xDist @{argv1} @{argv2}" />
            <xcpio argv1="${sconsDist.@{argv1}.@{argv2}}" argv2="${sdkDist.@{argv1}.@{argv2}}" >
                <include name="**" />
                <excludesfile name="${unwantedList}" />
                <exclude name="cpp/docs/**" />  <!-- SDK for osx_ios carries cpp docs separately, outside of "dist" -->
                <exclude name="*" />            <!-- SDK for osx_ios carries top level "dist" files separately -->
                <include name="manifest.txt" />
            </xcpio>
        </sequential>
    </macrodef> <!-- xDist -->

    <macrodef name="xcpExtras" description="Deploy optional extras into a Dist, with force" >
        <attribute name="argv1" description="to path" />
        <sequential>
            <echo level="verbose" message="xcpExtras @{argv1}" />
            <xcpio argv1="${extrasDir}" argv2="@{argv1}" >
                <include name="**" unless="${extrasList.exists}" />
                <includesfile name="${extrasList}" if="${extrasList.exists}" />
            </xcpio>
        </sequential>
    </macrodef> <!-- xcpExtras -->

    <!-- targets -->

    <target name="init" >

        <echo>
scons.os        ${scons.os}
sconsDir        ${sconsDir}
sconsDist.x86.dbg ${sconsDist.x86.dbg}
doManifest      ${doManifest}

releaseVersion  ${releaseVersion}
sdkDir          ${sdkDir}
sdkZip          ${sdkZip}</echo>

        <echo level="verbose" >
basedir         ${basedir}
workingDir      ${workingDir}

scons.os        ${scons.os}
sconsDir        ${sconsDir}
sconsDist.x86.dbg ${sconsDist.x86.dbg}

genversion      ${genversion}
manifest        ${manifest}
manifest.x86.dbg ${manifest.x86.dbg}
doManifest      ${doManifest}

releaseVersion  ${releaseVersion}
sdkName         ${sdkName}
sdkWork         ${sdkWork}
sdkTmp          ${sdkTmp}
sdkDir          ${sdkDir}
sdkDist.x86.dbg ${sdkDist.x86.dbg}
sdkZip          ${sdkZip}

etcDir          ${etcDir}
unwantedList    ${unwantedList}

extrasDir       ${extrasDir}
extrasList      ${extrasList}
extrasDir.exists    ${extrasDir.exists}
extrasList.exists   ${extrasList.exists}</echo>

        <fail message="available checks failed" status="1" >
            <condition>
                <not>
                    <and>
                        <available file="${sconsDir}"               type="dir" />
                        <available file="${sconsDist.x86.dbg}"      type="dir" />
                        <available file="${sconsDist.x86.rel}"      type="dir" />
                        <available file="${sconsDist.arm.dbg}"      type="dir" />
                        <available file="${sconsDist.arm.rel}"      type="dir" />
                        <available file="${sconsDist.armv7.dbg}"    type="dir" />
                        <available file="${sconsDist.armv7.rel}"    type="dir" />
                        <available file="${sconsDist.armv7s.dbg}"   type="dir" />
                        <available file="${sconsDist.armv7s.rel}"   type="dir" />
                        <available file="${sconsDist.sim.dbg}"      type="dir" />
                        <available file="${sconsDist.sim.rel}"      type="dir" />
                        <available file="${unwantedList}"           type="file" />
                        <!-- extras are optional -->
                    </and>
                </not>
            </condition>
        </fail>

        <fail message="contains checks failed" status="1" >
            <condition>
                <or>
                    <contains string="${sconsDir}/build/${scons.os}"    substring="${sdkDir}" />
                    <contains string="${sconsDir}/alljoyn_objc"         substring="${sdkDir}" />
                    <contains string="${sconsDir}/build/services/about" substring="${sdkDir}" />
                </or>
            </condition>
        </fail>

        <fail message="extrasList.exists but not extrasDir.exists" status="1" >
            <condition>
                <and>
                    <isset property="extrasList.exists" />
                    <not>
                        <isset property="extrasDir.exists" />
                    </not>
                </and>
            </condition>
        </fail>

        <fail message="extrasList.exists but no files found" status="1" >
            <condition>
                <and>
                    <isset property="extrasList.exists" />
                    <resourcecount count="0" >
                        <fileset dir="${extrasDir}" >
                            <includesfile name="${extrasList}" />
                        </fileset>
                    </resourcecount>
                </and>
            </condition>
        </fail>

        <fail message="not linux or mac" status="1" >
            <condition>
                <not>
                    <or>
                        <os family="unix" />
                        <os family="mac" />
                    </or>
                </not>
            </condition>
        </fail>

    </target> <!-- init -->

    <target name="manifest" depends="init" if="${doManifest}" >
        <local  name="gitVersion" />
        <exec executable="python" dir="${sconsDir}" outputproperty="gitVersion" logError="true" inputstring="" searchpath="true" failonerror="true" >
            <arg value="${genversion}" />
        </exec>
        <echo file="${manifest}"            force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.x86.dbg}"    force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.x86.rel}"    force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.arm.dbg}"    force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.arm.rel}"    force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.armv7.dbg}"  force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.armv7.rel}"  force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.armv7s.dbg}" force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.armv7s.rel}" force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.sim.dbg}"    force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.sim.rel}"    force="true" >${gitVersion}${line.separator}</echo>
        <echo>
gitVersion  ${gitVersion}
        </echo>
    </target>

    <target name="clean" depends="manifest" >
        <local  name="sdkDir.parent" />
        <local  name="sdkZip.parent" />
        <local  name="sdkTmp.parent" />
        <dirname property="sdkDir.parent" file="${sdkDir}" />
        <dirname property="sdkZip.parent" file="${sdkZip}" />
        <dirname property="sdkTmp.parent" file="${sdkTmp}" />
        <mkdir  dir="${sdkDir.parent}" />
        <mkdir  dir="${sdkZip.parent}" />
        <mkdir  dir="${sdkTmp.parent}" />
        <delete dir="${sdkDir}" />
        <delete file="${sdkZip}" />
        <delete file="${sdkTmp}" />
    </target>

    <target name="dist" depends="clean" >
        <xDist argv1="x86"      argv2="dbg" />
        <xDist argv1="x86"      argv2="rel" />
        <xDist argv1="arm"      argv2="dbg" />
        <xDist argv1="arm"      argv2="rel" />
        <xDist argv1="armv7"    argv2="dbg" />
        <xDist argv1="armv7"    argv2="rel" />
        <xDist argv1="armv7s"   argv2="dbg" />
        <xDist argv1="armv7s"   argv2="rel" />
        <xDist argv1="sim"      argv2="dbg" />
        <xDist argv1="sim"      argv2="rel" />
        <xDist argv1="arm386"   argv2="dbg" />
        <xDist argv1="arm386"   argv2="rel" />
        <xDist argv1="sim386"   argv2="dbg" />
        <xDist argv1="sim386"   argv2="rel" />
        <xcpio argv1="${sconsDir}/alljoyn_objc"     argv2="${sdkDir}/alljoyn_objc" >
            <include name="**" />
        </xcpio>
        <xcpio argv1="${sconsDir}/services/about"   argv2="${sdkDir}/services/about" >
            <include name="**" />
            <exclude name="build/**" />
            <exclude name="java/**" />
            <exclude name="cpp/docs/html/**" />
        </xcpio>
        <xcp   argv1="${sconsDir}" argv2="${sdkDir}" >
            <include name="manifest.txt" />
            <include name="README.md" />
        </xcp>
        <xcp   argv1="${sconsDir}/build/${scons.os}/x86/debug/dist"     argv2="${sdkDir}" >
            <include name="README.txt" />
            <include name="ReleaseNotes.txt" />
        </xcp>
        <xcpio argv1="${sconsDir}/build/${scons.os}/x86/debug/dist/cpp/docs"    argv2="${sdkDir}/build/docs" >
            <include name="**" />
        </xcpio>
        <xcp   argv1="${sconsDir}/build/${scons.os}/x86/debug/dist"     argv2="${sdkDir}/build/docs" >
            <include name="AllJoyn_API_Changes_cpp.txt" />
        </xcp>
    </target>

    <target name="extras" depends="dist" if="${extrasDir.exists}" >
        <xcpExtras argv1="${sdkDir}" />
    </target>

    <target name="zip" depends="extras" >
        <xzip argv1="${sdkDir}" argv2="${sdkZip}" />
        <echo>${sdkZip} is ready</echo>
        <delete dir="${sdkDir}" />
    </target>

</project>
