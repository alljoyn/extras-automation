<?xml version="1.0" encoding="utf-8"?>
<project name="Deploy SDK for OS X/iOS" default="zip" >

    <!-- properties -->

    <tstamp>
        <format property="xtstamp"          pattern="yyyyMMdd-HHmmss-SSS" />
    </tstamp>

    <property environment="env"/>
    <property name="label" value="${env.JOB_NAME}-${env.BUILD_NUMBER}"/>

    <property file="${basedir}/build.properties" />
    <property name="workingDir"             location="${user.dir}" />

    <property name="releaseVersion"         value="0.0.1" />
    <property name="scons.osDarwin"         value="darwin" />
    <property name="scons.osiOS"            value="iOS" />
    <property name="ajf"                    value="AllJoynFramework" />
    <property name="sdkName"                value="alljoyn-${releaseVersion}-osx_ios-sdk" />
    <property name="scons.br"               value="on" />
    <condition property="sdkToc.excludes"   value="**/docs/html/**" else="**/docs/html/**" >
        <!--
            BR=off has nothing to do with excluding docs/html from the Toc comparison.
            **/docs/html/** are always excluded because Doxygen generated API docs are unpredictable.
            It is convenient to define **/docs/html/** here in this property,
            because additional strings could be added here if BR=off
        -->
        <contains string="${scons.br}"      substring="off" />
    </condition>

    <property name="sconsDir"               location="${workingDir}" />
    <property name="sconsDist.darwin.dbg"   location="${sconsDir}/build/${scons.osDarwin}/${ajf}/Debug" />
    <property name="sconsDist.darwin.rel"   location="${sconsDir}/build/${scons.osDarwin}/${ajf}/Release" />
    <property name="sconsDist.darwin.inc"   location="${sconsDir}/build/${scons.osDarwin}/${ajf}/include" />
    <property name="sconsDist.iOS.dbg"      location="${sconsDir}/build/${scons.osiOS}/${ajf}/Debug" />
    <property name="sconsDist.iOS.rel"      location="${sconsDir}/build/${scons.osiOS}/${ajf}/Release" />
    <property name="sconsDist.iOS.inc"      location="${sconsDir}/build/${scons.osiOS}/${ajf}/include" />

    <property name="sconsDist.darwin.x86_64.dbg"  location="${sconsDir}/build/${scons.osDarwin}/x86_64/debug/dist" />
    <property name="sconsDist.darwin.x86_64.rel"  location="${sconsDir}/build/${scons.osDarwin}/x86_64/release/dist" />

    <property name="genversion"             location="${sconsDir}/build_core/tools/scons/genversion.py" />
    <property name="gitDir"                 location="${sconsDir}/.git" />
    <property name="manifest"               location="${sconsDir}/manifest.txt" />
    <property name="manifest.darwin.dbg"    location="${sconsDist.darwin.dbg}/manifest.txt" />
    <property name="manifest.darwin.rel"    location="${sconsDist.darwin.rel}/manifest.txt" />
    <property name="manifest.darwin.inc"    location="${sconsDist.darwin.inc}/manifest.txt" />
    <property name="manifest.iOS.rel"       location="${sconsDist.iOS.dbg}/manifest.txt" />
    <property name="manifest.iOS.dbg"       location="${sconsDist.iOS.rel}/manifest.txt" />
    <property name="manifest.iOS.inc"       location="${sconsDist.iOS.inc}/manifest.txt" />

    <condition property="doManifest" >
        <and>
            <available file="${genversion}" type="file" />
            <available file="${gitDir}" type="dir" />
        </and>
    </condition>

    <property name="sdkWork"                location="${workingDir}/sdks" />
    <property name="sdkTmp"                 location="${sdkWork}/z-${user.name}-${xtstamp}" />
    <property name="sdkDir"                 location="${sdkWork}/${sdkName}" />
    <property name="sdkZip"                 location="${sdkWork}/${sdkName}.zip" />
    <property name="sdkToc"                 location="${sdkWork}/${sdkName}.txt" />
    <property name="sdkDist.darwin.dbg"        location="${sdkDir}/build/${scons.osDarwin}/${ajf}/Debug" />
    <property name="sdkDist.darwin.rel"        location="${sdkDir}/build/${scons.osDarwin}/${ajf}/Release" />
    <property name="sdkDist.darwin.inc"        location="${sdkDir}/build/${scons.osDarwin}/${ajf}/include" />
    <property name="sdkDist.iOS.dbg"        location="${sdkDir}/build/${scons.osiOS}/${ajf}/Debug" />
    <property name="sdkDist.iOS.rel"        location="${sdkDir}/build/${scons.osiOS}/${ajf}/Release" />
    <property name="sdkDist.iOS.inc"        location="${sdkDir}/build/${scons.osiOS}/${ajf}/include" />

    <property name="sdkDist.darwin.x86_64.dbg" location="${sdkDir}/build/${scons.osDarwin}/x86_64/debug/dist" />
    <property name="sdkDist.darwin.x86_64.rel" location="${sdkDir}/build/${scons.osDarwin}/x86_64/release/dist" />

    <property name="etcDir"                 location="${basedir}/etc" />
    <property name="unwantedList"           location="${etcDir}/unwanted.list" />
    <property name="extrasDir"              location="${basedir}/extras" />

    <available property="extrasDir.exists"  file="${extrasDir}" type="dir" />
    <available property="extrasList.exists" file="${extrasList}" type="file" />

    <defaultexcludes add="**/.repo" />
    <defaultexcludes add="**/.sconsign.dblite" />

    <!-- custom tasks -->

    <macrodef name="xcp" description="Deploy any subtree, giving fileset elements" >
        <attribute name="argv1" description="from path" />
        <attribute name="argv2" description="to path" />
        <attribute name="argv3" description="force option, true or false" default="true" />
        <element name="fileset-elements" implicit="yes"/>
        <sequential>
            <echo level="verbose" message="xcp @{argv1} @{argv2} @{argv3}" />
            <mkdir dir="@{argv2}" />
            <copy todir="@{argv2}" preservelastmodified="true" overwrite="@{argv3}" force="@{argv3}" >
                <fileset dir="@{argv1}" >
                    <fileset-elements/>
                </fileset>
            </copy>
        </sequential>
    </macrodef> <!-- xcp -->

    <macrodef name="xcpio" description="Deploy any subtree, giving fileset elements, with Unix commands not Ant tasks" >
        <attribute name="argv1" description="from path" />
        <attribute name="argv2" description="to path" />
        <element name="fileset-elements" implicit="yes"/>
        <sequential>

            <local name="xcpiot"/>
            <echo level="verbose" message="xcpio @{argv1} @{argv2}" />

            <fileset dir="@{argv1}" id="xcpiot" >
                <fileset-elements/>
            </fileset>
            <pathconvert property="xcpiot" refid="xcpiot" pathsep="${line.separator}" >
                <map from="@{argv1}/" to="" />
                <!-- <filtermapper> <replacestring from="${path.separator}" to="${line.separator}" /> </filtermapper> -->
            </pathconvert>
            <delete file="${sdkTmp}-xcpiot" />
            <echo file="${sdkTmp}-xcpiot" force="true" >${xcpiot}${line.separator}</echo>

            <mkdir dir="@{argv2}" />
            <echo>cd "@{argv1}"${line.separator}cpio &lt; xcpiot -pmdl "@{argv2}"</echo>
            <echo level="verbose" >xcpiot:${line.separator}${xcpiot}${line.separator}</echo>
            <exec  dir="@{argv1}" executable="cpio" input="${sdkTmp}-xcpiot" failonerror="true" searchpath="true" >
                <arg value="-pmdl" />
                <arg value="@{argv2}" />
            </exec>
            <delete file="${sdkTmp}-xcpiot" />

        </sequential>
    </macrodef> <!-- xcpio -->

    <macrodef name="xzip" description="zip a subtree with Unix commands not Ant tasks" >
        <attribute name="argv1" description="from path" />
        <attribute name="argv2" description="to Zip file" />
        <sequential>
            <local name="argv1.parent"/>
            <local name="argv1.name"/>
            <echo level="verbose" message="xzip @{argv1} @{argv2}" />
            <dirname  property="argv1.parent" file="@{argv1}" />
            <basename property="argv1.name"   file="@{argv1}" />
            <delete file="@{argv2}" />
            <echo>cd "${argv1.parent}"${line.separator}zip -q -r "@{argv2}" "${argv1.name}"</echo>
            <exec  dir="${argv1.parent}" executable="zip" inputstring="" failonerror="true" searchpath="true" >
                <arg value="-q" />
                <arg value="-r" />
                <arg value="@{argv2}" />
                <arg value="${argv1.name}" />
            </exec>
        </sequential>
    </macrodef> <!-- xzip -->

    <macrodef name="xDist" description="Deploy one Dist" >
        <sequential>
            <echo level="verbose" message="xDist" />
            <xcpio argv1="${sconsDist}" argv2="${sdkDist}" >
                <include name="**" />
                <excludesfile name="${unwantedList}" />
            </xcpio>
            <xcp argv1="${sconsDir}" argv2="${sdkDist}" >
                <include name="README.md" />
            </xcp>
        </sequential>
    </macrodef> <!-- xDist -->

    <macrodef name="xcpExtras" description="Deploy optional extras into a Dist, with force" >
        <attribute name="argv1" description="to path" />
        <sequential>
            <echo level="verbose" message="xcpExtras @{argv1}" />
            <xcpio argv1="${extrasDir}" argv2="@{argv1}" >
                <include name="**" unless="${extrasList.exists}" />
                <includesfile name="${extrasList}" if="${extrasList.exists}" />
            </xcpio>
        </sequential>
    </macrodef> <!-- xcpExtras -->

    <macrodef name="xSpecial" description="special purpose" >
        <attribute name="argv1" description="upper dir" />
        <attribute name="argv2" description="lower dir" />
        <attribute name="argv3" description="output property name" />
        <sequential>

            <local name="argv1.parent" />
            <dirname property="argv1.parent" file="@{argv1}" />

            <delete file="${sdkTmp}-xtoc" />
            <echo force="true" file="${sdkTmp}-xtoc">@{argv2}</echo>

            <loadfile property="@{argv3}" srcFile="${sdkTmp}-xtoc">
                <filterchain>
                    <tokenfilter>
                        <replacestring from="${argv1.parent}/" to="" />
                    </tokenfilter>
                </filterchain>
            </loadfile>
            <delete file="${sdkTmp}-xtoc" />

        </sequential>
    </macrodef> <!-- xSpecial -->

    <macrodef name="xToc" description="Generate a list of files contained in the sdk" >
        <attribute name="argv1" description="from path" />
        <attribute name="argv2" description="to file" />
        <attribute name="argv3" description="absolute path to replace in the output list" />
        <attribute name="argv4" description="symbolic replacement for argv3 in the output list" />
        <attribute name="argv5" description="includes path prefix" default="" />
        <attribute name="argv6" description="excludes patterns" default="${sdkToc.excludes}" />
        <sequential>

            <echo level="verbose" message="xtoc @{argv1} @{argv2} @{argv3} @{argv4} @{argv5} @{argv6}" />

            <local name="xtoct" />
            <local name="xtocp" />
            <xSpecial argv1="@{argv1}" argv2="@{argv3}" argv3="xtocp" />

            <pathconvert property="xtoct" pathsep="${line.separator}" >
                <sort>
                    <union>
                        <fileset dir="@{argv1}" includes="@{argv5}**" excludes="@{argv6}" />
                        <!-- always include index.html from Doxygen generated API docs- one file represents the entire subdir -->
                        <fileset dir="@{argv1}" includes="@{argv5}**/docs/html/index.html" />
                    </union>
                    <name />
                </sort>
                <map from="@{argv3}/" to="$@{argv4}/" />
            </pathconvert>

            <echo level="verbose" >xtoct:${line.separator}#@{argv4}=${xtocp}${line.separator}${xtoct}${line.separator}</echo>
            <echo file="@{argv2}" force="true" append="true" >#@{argv4}=${xtocp}${line.separator}${xtoct}${line.separator}</echo>

        </sequential>
    </macrodef> <!-- xToc -->

    <!-- targets -->

<target name="init" >

<echo>
scons.osDarwin       ${scons.osDarwin}
scons.osiOS          ${scons.osiOS}
sconsDir             ${sconsDir}
sconsDist.darwin.dbg ${sconsDist.darwin.dbg}
sconsDist.darwin.rel ${sconsDist.darwin.rel}
sconsDist.darwin.inc ${sconsDist.darwin.inc}
sconsDist.iOS.dbg    ${sconsDist.iOS.dbg}
sconsDist.iOS.rel    ${sconsDist.iOS.rel}
sconsDist.iOS.inc    ${sconsDist.iOS.inc}

sconsDist.darwin.x86_64.dbg ${sconsDist.darwin.x86_64.dbg}
sconsDist.darwin.x86_64.rel ${sconsDist.darwin.x86_64.rel}

doManifest      ${doManifest}

releaseVersion      ${releaseVersion}
jenkinsWorkspace    ${jenkinsWorkspace}
sdkDir              ${sdkDir}
sdkZip              ${sdkZip}
sdkToc              ${sdkToc}
sdkDist.darwin.dbg  ${sdkDist.darwin.dbg}
sdkDist.darwin.rel  ${sdkDist.darwin.rel}
sdkDist.darwin.inc  ${sdkDist.darwin.inc}
sdkDist.iOS.dbg     ${sdkDist.iOS.dbg}
sdkDist.iOS.rel     ${sdkDist.iOS.rel}
sdkDist.iOS.inc     ${sdkDist.iOS.inc}

sdkDist.darwin.x86_64.dbg ${sdkDist.darwin.x86_64.dbg}
sdkDist.darwin.x86_64.rel ${sdkDist.darwin.x86_64.rel}

</echo>

<echo level="verbose" >
basedir         ${basedir}
workingDir      ${workingDir}

scons.osDarwin  ${scons.osDarwin}
scons.osiOS     ${scons.osiOS}
scons.br        ${scons.br}
sconsDir        ${sconsDir}

sconsDist.darwin.dbg ${sconsDist.darwin.dbg}
sconsDist.darwin.rel ${sconsDist.darwin.rel}
sconsDist.darwin.inc ${sconsDist.darwin.inc}
sconsDist.iOS.dbg    ${sconsDist.iOS.dbg}
sconsDist.iOS.rel    ${sconsDist.iOS.rel}
sconsDist.iOS.inc    ${sconsDist.iOS.inc}

sconsDist.darwin.x86_64.dbg ${sconsDist.darwin.x86_64.dbg}
sconsDist.darwin.x86_64.rel ${sdkDist.darwin.x86_64.rel}

genversion      ${genversion}
manifest        ${manifest}
manifest.x86_64.dbg ${manifest.x86_64.dbg}
doManifest      ${doManifest}

releaseVersion  ${releaseVersion}
jenkinsWorkspace ${jenkinsWorkspace}
sdkName         ${sdkName}
sdkWork         ${sdkWork}
sdkTmp          ${sdkTmp}
sdkDir          ${sdkDir}

sdkDist.darwin.dbg  ${sdkDist.darwin.dbg}
sdkDist.darwin.rel  ${sdkDist.darwin.rel}
sdkDist.darwin.inc  ${sdkDist.darwin.inc}
sdkDist.iOS.dbg     ${sdkDist.iOS.dbg}
sdkDist.iOS.rel     ${sdkDist.iOS.rel}
sdkDist.iOS.inc     ${sdkDist.iOS.inc}

sdkDist.darwin.x86_64.dbg ${sdkDist.darwin.x86_64.dbg}
sdkDist.darwin.x86_64.rel ${sdkDist.darwin.x86_64.rel}

sdkZip          ${sdkZip}
sdkToc          ${sdkToc}

etcDir          ${etcDir}
unwantedList    ${unwantedList}

extrasDir       ${extrasDir}
extrasList      ${extrasList}
extrasDir.exists    ${extrasDir.exists}
extrasList.exists   ${extrasList.exists}</echo>


<fail message="available checks failed" status="1" >
    <condition>
        <not>
            <and>
                <available file="${sconsDir}"                  type="dir" />
                <available file="${sconsDist.darwin.dbg}"      type="dir" />
                <available file="${sconsDist.darwin.rel}"      type="dir" />
                <available file="${sconsDist.darwin.inc}"      type="dir" />
                <available file="${sconsDist.iOS.dbg}"         type="dir" />
                <available file="${sconsDist.iOS.rel}"         type="dir" />
                <available file="${sconsDist.iOS.inc}"         type="dir" />
<!--                        <available file="${unwantedList}"              type="file" /> -->
                <!-- extras are optional -->
            </and>
        </not>
    </condition>
</fail>


<fail message="contains checks failed" status="1" >
    <condition>
        <or>
            <contains string="${sconsDir}/build/${scons.osDarwin}"    substring="${sdkDir}" />
            <contains string="${sconsDir}/build/${scons.osiOS}"    substring="${sdkDir}" />
            <contains string="${sconsDir}/alljoyn_objc"         substring="${sdkDir}" />
            <contains string="${sconsDir}/build/services/about" substring="${sdkDir}" />
        </or>
    </condition>
</fail>

<fail message="extrasList.exists but not extrasDir.exists" status="1" >
    <condition>
        <and>
            <isset property="extrasList.exists" />
                <not>
                    <isset property="extrasDir.exists" />
                </not>
        </and>
    </condition>
</fail>

<fail message="extrasList.exists but no files found" status="1" >
    <condition>
        <and>
            <isset property="extrasList.exists" />
                <resourcecount count="0" >
                    <fileset dir="${extrasDir}" >
                        <includesfile name="${extrasList}" />
                    </fileset>
                </resourcecount>
        </and>
    </condition>
</fail>

<fail message="not mac" status="1" >
    <condition>
        <not>
            <or>
                <os family="mac" />
            </or>
        </not>
    </condition>
</fail>

</target> <!-- init -->

    <target name="manifest" depends="init" if="${doManifest}" >
        <local  name="gitVersion" />
        <exec executable="python" dir="${sconsDir}" outputproperty="gitVersion" logError="true" inputstring="" searchpath="true" failonerror="true" >
            <arg value="${genversion}" />
        </exec>
        <echo file="${manifest}"            force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.darwin.dbg}"    force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.darwin.rel}"    force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.darwin.inc}"    force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.iOS.rel}"    force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.iOS.dbg}"  force="true" >${gitVersion}${line.separator}</echo>
        <echo file="${manifest.iOS.inc}"  force="true" >${gitVersion}${line.separator}</echo>
        <echo>
            gitVersion  ${gitVersion}
        </echo>
    </target>

    <target name="clean" depends="manifest" >
        <local  name="sdkDir.parent" />
        <local  name="sdkZip.parent" />
        <local  name="sdkTmp.parent" />
        <dirname property="sdkDir.parent" file="${sdkDir}" />
        <dirname property="sdkZip.parent" file="${sdkZip}" />
        <dirname property="sdkTmp.parent" file="${sdkTmp}" />
        <mkdir  dir="${sdkDir.parent}" />
        <mkdir  dir="${sdkZip.parent}" />
        <mkdir  dir="${sdkTmp.parent}" />
        <delete dir="${sdkDir}" />
        <delete file="${sdkZip}" />
        <delete file="${sdkTmp}" />
        <delete file="${sdkToc}" />
    </target>

    <target name="dist" depends="clean" >

        <xcpio argv1="${sconsDir}/alljoyn_objc"     argv2="${sdkDir}/alljoyn_objc" >
            <include name="**" />
        </xcpio>

        <xcpio argv1="${sconsDir}/services/about"   argv2="${sdkDir}/services/about" >
            <include name="**" />
            <exclude name="build/**" />
            <exclude name="java/**" />
        </xcpio>
        <xcp   argv1="${sconsDir}" argv2="${sdkDir}" >
            <include name="manifest.txt" />
            <include name="README.md" />
            <include name="README.txt" />
        </xcp>

         <xcp   argv1="${sconsDir}/alljoyn_core/docs" argv2="${sdkDir}" >
            <include name="ReleaseNotes.txt" />
        </xcp>

        <xcpio argv1="${sconsDir}/build/${scons.osDarwin}/${ajf}"    argv2="${sdkDir}/build/${scons.osDarwin}/${ajf}" >
            <include name="**" />
        </xcpio>

        <xcpio argv1="${sconsDir}/build/${scons.osiOS}/${ajf}"    argv2="${sdkDir}/build/${scons.osiOS}/${ajf}" >
            <include name="**" />
        </xcpio>

        <xcpio argv1="${sconsDir}/build/${scons.osDarwin}/x86_64"    argv2="${sdkDir}/build/${scons.osDarwin}/x86_64" >
            <include name="**" />
        </xcpio>

    </target>

    <target name="extras" depends="dist" if="${extrasDir.exists}" >
        <xcpExtras argv1="${sdkDir}" />
    </target>

    <target name="toc" depends="extras" >
        <delete file="${sdkToc}" />
        <xToc argv1="${sdkDir}" argv2="${sdkToc}" argv3="${sdkDir}" argv4="SDK" />
        <echo>${sdkToc} is ready</echo>
    </target>

    <target name="zip" depends="toc" >
        <xzip argv1="${sdkDir}" argv2="${sdkZip}" />
        <echo>${sdkZip} is ready</echo>
        <delete dir="${sdkDir}" />
    </target>

</project>
